#!/bin/bash -e

GO_VERSION="1.17.1"
TERRAFORM_VERSION="1.0.6"

echo "--------------------------------"
echo "Installing Apt Dependencies"
echo "--------------------------------"
sudo apt-get update && sudo apt-get upgrade -y

sudo apt-get install -y \
  apt-transport-https \
  autoconf \
  automake \
  bison \
  build-essential \
  ca-certificates \
  curl \
  git \
  gnupg gnupg-agent \
  gpg \
  keychain \
  libc6-dev libssl-dev libtool libxml2-dev libyaml-dev \
  lsb-release \
  openssl \
  python3 python3-pip \
  silversearcher-ag \
  software-properties-common \
  tmux \
  tree \
  unzip \
  vim \
  zlib1g zlib1g-dev \
  zsh

echo "--------------------------------"
echo "Installing Docker"
echo "--------------------------------"
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

echo "--------------------------------"
echo "Installing Go"
echo "--------------------------------"
curl -L -o /tmp/go$GO_VERSION.tar.gz https://golang.org/dl/go$GO_VERSION.linux-arm64.tar.gz
sudo tar -C /usr/local -xzf /tmp/go$GO_VERSION.tar.gz
rm /tmp/go$GO_VERSION.tar.gz
export PATH="$PATH:/usr/local/go/bin"

echo "--------------------------------"
echo "Installing Shell Accessories"
echo "--------------------------------"
if [[ -d ~/.oh-my-zsh ]]; then
  echo "WARN: Oh My Zsh directory exists at ~/.oh-my-zsh, skipping..."
else
  curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh
fi

echo "--------------------------------"
echo "Installing Vim Plugins"
echo "--------------------------------"
if [[ -d ~/.vim/autoload ]] || [[ -d ~/.vim/bundle ]]; then
  echo "WARN: Autoload and Bundle directories already exist under ~/.vim, skipping..."
else
  mkdir -p ~/.vim/autoload ~/.vim/bundle
  curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
  git clone https://github.com/lilydjwg/colorizer ~/.vim/bundle
  git clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree
  git clone https://tpope.io/vim/surround.git ~/.vim/bundle/surround
fi

echo "--------------------------------"
echo "Installing Git Accessories"
echo "--------------------------------"
echo "# git-secret"
if [[ -z $(cat /etc/apt/sources.list | grep git-secret) ]]; then
  sudo sh -c "echo 'deb https://gitsecret.jfrog.io/artifactory/git-secret-deb git-secret main' >> /etc/apt/sources.list"
  wget -qO - 'https://gitsecret.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
else
  echo "git-secret apt source exists already"
fi
sudo apt-get update && sudo apt-get install -y git-secret
echo "# git-chglog"
go get -u github.com/git-chglog/git-chglog/cmd/git-chglog
echo "# pre-commit"
pip install pre-commit

echo "--------------------------------"
echo "Installing Terraform and Accessories"
echo "--------------------------------"
echo "# tfvm"
wget -q -O - https://raw.githubusercontent.com/ethanhassett/tfvm/main/install.sh | bash
export PATH="$PATH:$HOME/.tfvm/bin"
echo "# Terraform v$TERRAFORM_VERSION"
if [[ $(tfvm list | grep $TERRAFORM_VERSION) ]]; then
  echo "Terraform v$TERRAFORM_VERSION is already installed."
else
  tfvm install $TERRAFORM_VERSION
fi
tfvm use $TERRAFORM_VERSION
echo "# terraform-docs"
GO111MODULE="on" go get github.com/terraform-docs/terraform-docs@v0.15.0

echo "--------------------------------"
echo "Copying Files and Setting Shell"
echo "--------------------------------"
sudo cp tmux/.tmux.conf ~/.tmux.conf
sudo cp vim/.vimrc ~/.vimrc
sudo mkdir -p ~/.oh-my-zsh/themes && sudo cp zsh/erhbg.zsh-theme ~/.oh-my-zsh/themes/erhbg.zsh-theme
sudo cp zsh/.zshrc ~/.zshrc
sudo mkdir -p ~/.dir_colors && sudo cp zsh/dircolors.256darksolarized ~/.dir_colors/dircolors.256darksolarized

chsh -s /bin/zsh

echo "--------------------------------"
echo "System has been bootstrapped successfully, Happy Hacking!"
echo "--------------------------------"
